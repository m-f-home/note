class RangeList {
  constructor(list) {
    this.list = list ? [list] : []
  }
  /**
   * Adds a range to the list
   * @param {Array} range Array of two integers that specify beginning and end of range
   */
  add(range) {
    const temp = this._mergeInterval([...this.list, range])
    this.list = temp
  }

  /**
   * Remove a range from the list
   * @param {Array} range Array of two integers that specify beginning and end of range
   */
  remove(range) {
    const leftIndex = 
    for(let i = 0; i < this.list.length; i++) {
      const left = this.list[i][0]
      const right = this.list[i][1]
      if (left < range[0] && right > range[1]) {
        this.list.splice(i, 1, [left, range[0]], [range[1], right])
      } else if (left )
    }
  }

  /**
   * Prints out the list of ranges in the range list
   */
  print() {
    console.log(this.list)
  }

  _binarySearch(num) {
    let low = 0, high = this.list.length - 1
    while(low <= high) {
      const middle = Math.trunc((high + low) / 2)
      const cur = Math.abs(this.list[middle])
      if (num < cur) {}
    }
  }

//   RangeModule.prototype.binarySearch = function (val) {
//     let low = 0, high = this.ranges.length - 1;
//     while (low <= high) {
//         const mid = Math.trunc((high + low) / 2);
//         const curValue = Math.abs(this.ranges[mid]);
//         switch (true) {
//             case val < curValue:
//                 high = mid - 1;
//                 break;
//             case val > curValue:
//                 low = mid + 1;
//                 break;
//             case val == curValue:
//                 return mid;
//         }
//     }
//     return low;
// }

  /**
   * merge interval, returns the result of the merged interval
   * @param {Array} array User added data, Two-dimensional array
   */
  _mergeInterval(array) {
    const result = []
    array.sort((a, b) => a[0] - b[0])
    for(let i = 0; i < array.length; i++) {
      if (i != array.length - 1 && array[i][1] >= array[i + 1][0]) {
        if (array[i][1] >= array[i + 1][1]) {
          array[i + 1][1] = array[i][1]
        }
        array[i + 1][0] = array[i][0]
      } else {
        result.push(array[i])
      }
    }
    return result
  }
}

const rl = new RangeList()

rl.add([1, 5])
rl.print()

rl.add([10, 20])
rl.print()

rl.add([20, 20])
rl.print()

rl.add([20, 21])
rl.print()

rl.add([2, 4])
rl.print()

rl.add([3, 8])
rl.print()
  
